/*
	***This is computer generated notice - Do not modify it***

	VulkanRenderer (inclusive of its dependencies and subprojects 
	such as toolchains written by the same author) is a software to render 
	2D & 3D geometries by writing C/C++ code and shaders.

	File: multiple_gfx_pipeline.v3dshader is a part of VulkanRenderer

	Copyright (C) 2021 - 2024  Author: Ravi Prakash Singh

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>. 
*/

#sb version 2022
#sl version 2022

[Name("Multiple Gfx Pipeline Shader")]
Shader
{
	[NoParse]
	Properties
	{
		fragment vertex [4, 0] uniform Parameters
		{
			vec4 color;
		} parameters;

		fragment [4, 1] uniform sampler2D albedo; 
	}

	[NoParse]
	Layout
	{
		per_vertex [0, 0] vec3 position;
		per_vertex [1, 1] vec3 normal;
		per_vertex [2, 2] vec2 texcoord;
	}

	RenderPass
	{
		SubPass
		{
			GraphicsPipeline
			{
				// no color attachment
				colorBlend { }

				// depth attachment
				depthStencil
				{
					depthTestEnable = true,
					depthWriteEnable = true
				}

				GLSL
				{
					#stage vertex

					#version 450

					void main()
					{
						
					}

					#stage fragment

					#version 450

					layout(location = 0) out vec4 outColor;
					void main()
					{
						outColor = vec4(1.0, 1.0, 1.0, 1.0);
					}
				}
			}

			GraphicsPipeline
			{
				GLSL
				{
					#stage vertex
					#version 450

					void main()
					{

					}

					#stage fragment
					#version 450

					layout(location = 0) out vec4 outColor;
					void main()
					{
						outColor = vec4(1.0, 1.0, 1.0, 1.0);
					}
				}
			}
		}
	}

	[Read(depth, set = RENDER_SET, binding = TEXTURE_BINDING0)]
	RenderPass
	{

		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment { }			// color = 0
					attachment { }			// color = 1
				}

				depthStencil
				{
					depthTestEnable = true,
					depthWriteEnable = true
				}

				GLSL
				{
					#stage vertex

					#version 450

					void main()
					{

					}

					#stage fragment

					#version 450

					layout(location = 0) out vec4 outColor;
					void main()
					{
						outColor = vec4(1.0, 1.0, 1.0);
					}
				}
			}
		}

		[Read(color = 1, set = SUB_RENDER_SET, binding = INPUT_ATTACHMENT_BINDING0)]
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment { }
				}

				depthStencil
				{
					depthTestEnable = true,
					depthWriteEnable = true
				}

				GLSL
				{
					#stage vertex

					#version 450

					void main()
					{

					}

					#stage fragment

					#version 450

					void main()
					{

					}
				}
			}
		}
	}
}
