/*
	***This is computer generated notice - Do not modify it***

	VulkanRenderer (inclusive of its dependencies and subprojects 
	such as toolchains written by the same author) is a software to render 
	2D & 3D geometries by writing C/C++ code and shaders.

	File: unit_color.v3dshader is a part of VulkanRenderer

	Copyright (C) 2023  Author: Ravi Prakash Singh

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>. 
*/

#sb version 2022
#sl version 2022

[Name("UnlitColorShader")]
Shader
{
	[NoParse]
	Properties
	{
		fragment vertex [4, 0] uniform Parameters
		{
			vec4 color;
		} parameters;
	}

	[NoParse]
	Layout
	{
		per_vertex [0, 0] vec3 position;
	}

	RenderPass
	{
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment { }
				}

				depthStencil
				{
					depthTestEnable = true,
					depthWriteEnable = true
				}
			}

			[NoParse]
			GLSL
			{
				#stage vertex
				#version 450
				
				#include <v3d.h>
				
				layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
				layout(set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
				
				layout(location = POSITION_LOCATION) in vec3 position;
				
				void main()
				{
					vec4 clipPos = cameraInfo.projection * cameraInfo.view * objectInfo.transform * vec4(position, 1);
					clipPos.y = -clipPos.y;
					gl_Position = clipPos;
				}

				#stage fragment
				#version 450
				
				#include <v3d.h>
				
				layout(set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
				{
					vec4 color;
				} parameters;
				
				layout(location = 0) out vec4 color;
				
				void main()
				{
					color = parameters.color;
				}
			}
		}
	}
}
