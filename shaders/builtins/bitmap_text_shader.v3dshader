/*
	***This is computer generated notice - Do not modify it***

	VulkanRenderer (inclusive of its dependencies and subprojects 
	such as toolchains written by the same author) is a software to render 
	2D & 3D geometries by writing C/C++ code and shaders.

	File: bitmap_text_shader.v3dshader is a part of VulkanRenderer

	Copyright (C) 2021 - 2024  Author: Ravi Prakash Singh

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>. 
*/


#sb version 2023
#sl version 2023

[Name("BitmapTextShader")]
Shader /* load("text_shader.v3dshader") */
{
    [NoParse]
    Properties
    {
        vertex [MATERIAL_SET, MATERIAL_PROPERTIES_BINDING] uniform Parameters
        {
            int isScreenSpace /* = 0 */;
        } parameters;

        fragment [MATERIAL_SET, TEXTURE_BINDING0] uniform sampler2D bga;

    }

    Layout
    {
        [Rate(per_vertex)]
        [MeshLayout(sge_optimal)]
        [Attribute(position)]
        vec3 position;

        [Rate(per_instance)]
        [Attribute(binding=5,location=5)]
        vec4 ofst_indx;

        [Rate(per_instance)]
        [Attribute(binding=5,location=6)]
        vec4 rotn_stid;

        [Rate(per_instance)]
        [Attribute(binding=5,location=7)]
        vec4 rotn_stid;
    }

    // [NoParse]
    // Layout
    // {
    //     /* position of the vertex in model space */
    //     per_vertex [POSITION_BINDING, POSITION_LOCATION] vec3 position;
        
    //     /* Glyph Render Data */

    //     /* per_instance [5, 5] vec3 ofst;
    //      * per_instance [5, 5] uint indx; */
    //     per_instance [5, 5] vec4 ofst_indx;
    //     /* per_instance [5, 6] vec3 rotn;
    //      * per_instance [5, 6] uint stid; */
    //     per_instance [5, 6] vec4 rotn_stid;
    //     /* per_instance [5, 7] vec3 scal; */
    //     per_instance [5, 7] vec3 scal;
    // }
    
    RenderPass
    {
        SubPass
        {
            [NoParse]
            GraphicsPipeline
            {
                colorBlend
                {
                    attachment { }
                }

                depthStencil
                {
                    depthWriteEnable = false,
                    depthTestEnable = false
                }
            }
            [NoParse]
            GLSL
            {
                #stage vertex
        
                #version 450

                #include <v3d.h>
                
                layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
                layout(set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
                layout(set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
                {
                    int isScreenSpace;
                } parameters;

                struct GlyphTexCoord
                {
                    vec2 tltc;
                    vec2 trtc;
                    vec2 brtc;
                    vec2 bltc;
                };

                layout(set = MATERIAL_SET, binding = TEXTURE_BINDING0) uniform GTCBuffer
                {
                    GlyphTexCoord[] gtc_buffer;
                };

                layout(set = MATERIAL_SET, binding = TEXTURE_BINDING1) uniform TSTBuffer
                {
                    mat4[] tst_buffer;
                };

                //Inputs
                //per vertex
                layout(location = POSITION_LOCATION) in vec3 position;
                
                //per instance
                // const vec3 ofst = vec3(1.0, 1.0, 1.0);
                layout(location = 5, component = 0) in vec3 ofst;
                layout(location = 5, component = 3) in float indx_f;
                layout(location = 6, component = 0) in vec3 rotn;
                layout(location = 6, component = 3) in float stid_f;
                layout(location = 7, component = 0) in vec3 scal;

                // layout(location = 0) out vec2 _texcoord;

                // mat4 mat4_diagonal(float x, float y, float z, float w)
                // {
                //     mat4 m = mat4(vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0));
                //     m[0][0] = x;
                //     m[1][1] = y;
                //     m[2][2] = z;
                //     m[3][3] = w;
                //     return m;
                // }

                const vec3 colors[] = 
                { 
                    vec3(1.0, 0.0, 0.0), 
                    vec3(0.0, 1.0, 0.0),
                    vec3(0.5, 0.5, 0.5),
                    vec3(1.0, 0.0, 1.0),
                    vec3(1.0, 1.0, 0.0),
                    vec3(0.0, 1.0, 1.0),
                    vec3(0.5, 0.5, 1.0),
                    vec3(0.5, 1.0, 0.5),
                    vec3(1.0, 0.5, 0.5)
                };

                layout(location = 0) out vec3 out_color;
                layout(location = 1) out vec2 out_texcoord;
                
                void main()
                {
                    uint indx = floatBitsToUint(indx_f);
                    uint stid = floatBitsToUint(stid_f);
                    gl_Position = vec4(position.x * 0.1 + ofst.x * 0.12 - 0.1 * 8 /*+ ofst.x * 0.32*/, position.y * 0.3, 0, 1.0);
                    out_color = colors[indx];
                    // vec3 pos = local_position + ofst;//ofst + local_position * scale;
                    // vec4 clipPos; 
                    // if(parameters.isScreenSpace == 1)
                    // {
                    //     mat4 scale = mat4_diagonal(100, 100, 100, 1);
                    //     clipPos = cameraInfo.screen * scale * objectInfo.transform * vec4(pos, 1);
                    // }
                    // else if(parameters.isScreenSpace == 0)
                    // {
                    //     mat4 scale = mat4_diagonal(0.3, 0.3, 0.3, 1);
                    //     clipPos = cameraInfo.projection * cameraInfo.view * scale * objectInfo.transform * vec4(pos, 1);
                    // }
                    // clipPos.y = -clipPos.y;
                    // gl_Position = clipPos;

                    // _texcoord = vec2(1.0, 1.0);
                }
                
                
                #stage fragment
                
                #version 450

                #include <v3d.h>
                
                layout(set = MATERIAL_SET, binding = TEXTURE_BINDING0) uniform sampler2D bga;

                // layout(location = 0) in vec2 _texcoord;

                layout(location = 0) in vec3 in_color;
                layout(location = 0) out vec4 color;
                
                void main()
                {
                    // color = texture(bga, _texcoord).rgb;
                    color = vec4(in_color.x, in_color.y, in_color.z, 1.0);
                    // color = vec4(1.0, 1.0, 1.0, 1.0);
                }
            }
        }
    }

}