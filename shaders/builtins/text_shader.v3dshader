/*
	***This is computer generated notice - Do not modify it***

	VulkanRenderer (inclusive of its dependencies and subprojects 
	such as toolchains written by the same author) is a software to render 
	2D & 3D geometries by writing C/C++ code and shaders.

	File: text_shader.v3dshader is a part of VulkanRenderer

	Copyright (C) 2021 - 2024  Author: Ravi Prakash Singh

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>. 
*/


#sb version 2023
#sl version 2023

Shader
{
    [NoParse]
    Properties
    {
        vertex [MATERIAL_SET, MATERIAL_PROPERTIES_BINDING] uniform Parameters
        {
            int isScreenSpace;
			int space_type;
			int surface_type;
        } parameters;
    }

    Layout
    {
        [Rate(per_vertex)]
        [MeshLayout(sge_optimal)]
        [Attribute(position)]
        vec3 position;

        [Rate(per_instance)]
        [Attribute(binding=5,location=1)]
        vec3 offset;

        [Rate(per_instance)]
        [Attribute(binding=5,location=2)]
        vec3 scale;

        [Rate(per_instance)]
        [Attribute(binding=5,location=3)]
        vec3 rotation;
    }

    // [NoParse]
    // Layout
    // {
    //     per_vertex [POSITION_BINDING, POSITION_LOCATION] vec3 local_position;
    //     per_instance [5, 1] vec3 offset;
    //     per_instance [5, 2] vec3 scale;
    //     per_instance [5, 3] vec3 rotation;
    // }

    RenderPass
    {
        SubPass
        {
            [NoParse]
            GraphicsPipeline
            {
                colorBlend
                {
                    attachment { }
                }

                depthStencil
                {
                    depthWriteEnable = false,
                    depthTestEnable = false
                }
            }
            [NoParse]
            GLSL
            {
                #stage vertex

                #version 450

                #include <v3d.h>

                layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
                layout(set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
                layout(set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
                {
                    int isScreenSpace;
                } parameters;

                //Inputs
                //per vertex
                layout(location = POSITION_LOCATION) in vec3 local_position;

                //per instance
                layout(location = 1) in vec3 offset;
                layout(location = 2) in vec3 scale;
                layout(location = 3) in vec3 rotation;

                mat4 mat4_diagonal(float x, float y, float z, float w)
                {
                    mat4 m = mat4(vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0));
                    m[0][0] = x;
                    m[1][1] = y;
                    m[2][2] = z;
                    m[3][3] = w;
                    return m;
                }

                void main()
                {
                    vec3 pos = local_position + offset;//offset + local_position * scale;
                    vec4 clipPos;
                    if(parameters.isScreenSpace == 1)
                    {
                        mat4 scale = mat4_diagonal(100, 100, 100, 1);
                        clipPos = cameraInfo.screen * scale * objectInfo.transform * vec4(pos, 1);
                    }
                    else if(parameters.isScreenSpace == 0)
                    {
                        mat4 scale = mat4_diagonal(0.3, 0.3, 0.3, 1);
                        clipPos = cameraInfo.projection * cameraInfo.view * scale * objectInfo.transform * vec4(pos, 1);
                    }
                    clipPos.y = -clipPos.y;
                    gl_Position = clipPos;
                }


                #stage fragment

                #version 450

                layout(location = 0) out vec3 color;

                void main()
                {
                    color = vec3(1, 1, 1);
                }
            }
        }
    }

}
