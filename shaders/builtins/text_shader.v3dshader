
#sb version 2022
#sl version 2022

Shader
{
    [NoParse]
    Properties
    {
        vertex [MATERIAL_SET, MATERIAL_PROPERTIES_BINDING] uniform Parameters
        {
            int isScreenSpace;
        } parameters;
    }
    [NoParse]
    Layout
    {
        per_vertex [POSITION_BINDING, POSITION_LOCATION] vec3 local_position;
        per_instance [1, 1] vec3 offset;
        per_instance [1, 2] vec3 scale;
        per_instance [1, 3] vec3 rotation;
    }
    
    RenderPass
    {
        SubPass
        {
            [NoParse]
            GraphicsPipeline
            {
                colorBlend
                {
                    attachment { }
                }

                depthStencil
                {
                    depthWriteEnable = false,
                    depthTestEnable = false
                }
            }
            [NoParse]
            GLSL
            {
                #stage vertex
        
                #version 450

                #include <v3d.h>
                
                layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
                layout(set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
                layout(set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
                {
                    int isScreenSpace;
                } parameters;

                //Inputs
                //per vertex
                layout(location = POSITION_LOCATION) in vec3 local_position;
                
                //per instance
                layout(location = 1) in vec3 offset;
                layout(location = 2) in vec3 scale;
                layout(location = 3) in vec3 rotation;

                mat4 mat4_diagonal(float x, float y, float z, float w)
                {
                    mat4 m = mat4(vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0));
                    m[0][0] = x;
                    m[1][1] = y;
                    m[2][2] = z;
                    m[3][3] = w;
                    return m;
                }
                
                void main()
                {
                    vec3 pos = local_position + offset;//offset + local_position * scale;
                    vec4 clipPos; 
                    if(parameters.isScreenSpace == 1)
                    {
                        mat4 scale = mat4_diagonal(100, 100, 100, 1);
                        clipPos = cameraInfo.screen * scale * objectInfo.transform * vec4(pos, 1);
                    }
                    else if(parameters.isScreenSpace == 0)
                    {
                        mat4 scale = mat4_diagonal(0.3, 0.3, 0.3, 1);
                        clipPos = cameraInfo.projection * cameraInfo.view * scale * objectInfo.transform * vec4(pos, 1);
                    }
                    clipPos.y = -clipPos.y;
                    gl_Position = clipPos;
                }
                
                
                #stage fragment
                
                #version 450
                
                layout(location = 0) out vec3 color;
                
                void main()
                {
                    color = vec3(1, 1, 1);
                }
            }
        }
    }

}