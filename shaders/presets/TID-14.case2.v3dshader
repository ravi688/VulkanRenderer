
#sl version 2022
#sb version 2022

Shader
{
	[NoParse]
	Properties
	{
		vertex fragment [MATERIAL_SET, MATERIAL_PROPERTIES_BINDING] uniform Parameters
		{
			vec4 color;
		} parameters;
	}

	[NoParse]
	Layout
	{
		per_vertex [POSITION_BINDING, POSITION_LOCATION] vec3 position;
		per_vertex [NORMAL_BINDING, NORMAL_LOCATION] vec3 normal;
	}

	RenderPass
	{
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment { }
				}

				depthStencil
				{
					depthWriteEnable = true,
					depthTestEnable = true
				}
			}

			[NoParse]
			GLSL
			{
				#stage vertex


				#version 450
				
				#include <v3d.h>
				
				layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
				layout(set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
				
				
				layout(location = POSITION_LOCATION) in vec3 position;
				layout(location = NORMAL_LOCATION) in vec3 normal;
				
				layout(location = 0) out vec3 _normal;
				
				void main()
				{
					vec4 clipPos = cameraInfo.projection * cameraInfo.view * objectInfo.transform * vec4(position, 1);
					clipPos.y = -clipPos.y;
					gl_Position = clipPos;
					_normal = normalize((objectInfo.normal * vec4(normal, 0)).xyz);
				}

				#stage fragment

				#version 450
				
				#include <v3d.h>
				
				layout(set = GLOBAL_SET, binding = LIGHT_BINDING) uniform DirectionalLight lightInfo;
				
				layout(set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
				{
					vec4 color;
				} parameters;
				
				
				layout(location = 0) in vec3 _normal;
				
				layout(location = 0) out vec4 color;
				
				void main()
				{
					float dp = 0.5 * dot(-_normal, lightInfo.direction) + 0.5;
					color = parameters.color * dp * vec4(lightInfo.color, 1);
				}

			}
		}
	}

	[Read(depth, set = RENDER_SET, binding = TEXTURE_BINDING0)]
	RenderPass
	{
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment { }
				}
			}

			[NoParse]
			GLSL
			{

				#stage vertex

				#version 450
				
				#include <v3d.h>
				
				layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
				layout(set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
				
				
				layout(location = POSITION_LOCATION) in vec3 position;

				layout(location = 0) out vec4 outPosition;
				
				void main()
				{
					vec4 clipPos = cameraInfo.projection * cameraInfo.view * objectInfo.transform * vec4(position, 1);
					clipPos.y = -clipPos.y;
					gl_Position = clipPos;
					outPosition = clipPos / clipPos.w;
				}

				#stage fragment

				#version 450

				#include <v3d.h>

				layout(
						set = RENDER_SET, 
						binding = TEXTURE_BINDING0) uniform sampler2D prevColor;

				layout(location = 0) out vec4 outColor;
				layout(location = 0) in vec4 inPosition;
				void main()
				{
					float c = texture(prevColor, vec2(inPosition.x + 0.5, inPosition.y + 0.5)).r;
					c = exp(c * 0.7) - 1;
					c *= c;
					c *= c;
					c *= c;
					outColor = vec4(c, c, c, 1);
				}
			}
		}
	}
}
