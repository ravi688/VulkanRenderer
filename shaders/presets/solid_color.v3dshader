#sl version 2023
#sb version 2023

[Name("SolidColor")]
Shader
{
	Properties
	{
		[Stage(fragment, vertex)]
		[Set(material_set, material_properties)]
		uniform Parameters
		{
			vec4 color;
		} parameters;
	}

	Layout
	{
		[Rate(per_vertex)]
		[MeshLayout(sge_optimal)]
		[Attribute(position)]
		vec3 position;
	}

	RenderPass
	{
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				rasterization
				{
					// in SUTK (geometry compilation) we need this to be counterclockwise
					frontface = counterclockwise
				}
				colorBlend
				{
					attachment { }
				}
			}

			[NoParse]
			GLSL
			{
				#stage vertex

				#version 450
				
				#include <v3d.h>
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = GLOBAL_SET, binding = SCREEN_BINDING) uniform ScreenInfo
				{
					uvec2 resolution;
					uvec2 dpi;
					uvec2 size;
					mat4 matrix;
				} screenInfo;

				layout(location = POSITION_LOCATION) in vec3 position;
				
				void main()
				{
					vec4 clipPos = screenInfo.matrix * objectInfo.transform * vec4(position, 1);
					clipPos.y = -clipPos.y;
					gl_Position = clipPos;
				}

				#stage fragment

				#version 450
				
				#include <v3d.h>
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
				{
					vec4 color;
				} parameters;
				
				layout(location = 0) out vec4 color;
				
				void main()
				{
					color = parameters.color;
				}
			}
		}
	}
}