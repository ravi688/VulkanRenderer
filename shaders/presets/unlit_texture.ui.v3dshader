#sl version 2023
#sb version 2023

[Name("SolidColor")]
Shader
{
	Properties
	{
		[Stage(fragment, vertex)]
		[Set(material_set, material_properties)]
		uniform Parameters
		{
			vec4 color;
		} parameters;

		[Stage(fragment)]
		[Set(material_set, texture0)]
		uniform sampler2D albedo;
	}

	Layout
	{
		[Rate(per_vertex)]
		[MeshLayout(sge_optimal)]
		[Attribute(position)]
		vec3 position;

		[Rate(per_vertex)]
		[MeshLayout(sge_optimal)]
		[Attribute(texcoord)]
		vec2 texcoord;
	}

	RenderPass
	{
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment
					{
						blendenable = true
					}
				}
				depthStencil
				{
					depthWriteEnable = true,
					depthTestEnable = true
				}
			}

			[NoParse]
			GLSL
			{
				#stage vertex

				#version 450
				
				#include <v3d.h>
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = GLOBAL_SET, binding = SCREEN_BINDING) uniform ScreenInfo
				{
					uvec2 resolution;
					uvec2 dpi;
					uvec2 size;
					mat4 matrix;
				} screenInfo;

				layout(location = POSITION_LOCATION) in vec3 position;
				layout(location = TEXCOORD_LOCATION) in vec2 texcoord;
				layout(location = 0) out vec2 _texcoord;
				
				void main()
				{
					vec4 clipPos = screenInfo.matrix * objectInfo.transform * vec4(position, 1);
					clipPos.y = -clipPos.y;
					gl_Position = clipPos;
					_texcoord = texcoord;
				}

				#stage fragment

				#version 450
				
				#include <v3d.h>
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
				{
					vec4 color;
				} parameters;
				
				layout(set = MATERIAL_SET, binding = TEXTURE_BINDING0) uniform sampler2D albedo;
				
				layout(location = 0) in vec2 _texcoord;
				layout(location = 0) out vec4 color;

				void main()
				{
					color = texture(albedo, _texcoord).rgba * parameters.color;
				}
			}
		}
	}
}