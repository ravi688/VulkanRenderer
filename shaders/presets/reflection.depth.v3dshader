/*
	***This is computer generated notice - Do not modify it***

	VulkanRenderer (inclusive of its dependencies and subprojects 
	such as toolchains written by the same author) is a software to render 
	2D & 3D geometries by writing C/C++ code and shaders.

	File: reflection.depth.v3dshader is a part of VulkanRenderer

	Copyright (C) 2021 - 2024  Author: Ravi Prakash Singh

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>. 
*/

#sl version 2023
#sb version 2023

Shader
{
	[NoParse]
	Properties
	{
		vertex fragment [MATERIAL_SET, MATERIAL_PROPERTIES_BINDING] uniform Parameters
		{
			vec4 color;
			float reflectance;
		} parameters;

		fragment [MATERIAL_SET, TEXTURE_BINDING0] uniform samplerCube reflectionMap;
	}

	Layout
	{
		[Rate(per_vertex)]
		[MeshLayout(sge_optimal)]
		[Attribute(position)]
		vec3 position;

		[Rate(per_vertex)]
		[MeshLayout(sge_optimal)]
		[Attribute(normal)]
		vec3 normal;
	}

	// [NoParse]
	// Layout
	// {
	// 	per_vertex [POSITION_BINDING, POSITION_LOCATION] vec3 position;
	// 	per_vertex [NORMAL_BINDING, NORMAL_LOCATION] vec3 normal;
	// }

	RenderPass
	{
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment { }
				}

				depthStencil
				{
					depthTestEnable = true,
					depthWriteEnable = true
				}
			}

			[NoParse]
			GLSL
			{
				#stage vertex

				#version 450
				
				#include <v3d.h>
				
				layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
				layout(set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
				
				
				layout(location = POSITION_LOCATION) in vec3 position;
				layout(location = NORMAL_LOCATION) in vec3 normal;
				
				layout(location = 0) out vec3 _normal;
				layout(location = 1) out vec3 _position;
				
				void main()
				{
					_position = normalize((objectInfo.normal * vec4(position, 0)).xyz);
					vec4 clipPos = cameraInfo.projection * cameraInfo.view * objectInfo.transform * vec4(position, 1);
					clipPos.y = -clipPos.y;
					gl_Position = clipPos;
					_normal = normalize((objectInfo.normal * vec4(normal, 0)).xyz);
				}

				#stage fragment

				#version 450
				
				#include <v3d.h>
				
				layout(set = GLOBAL_SET, binding = LIGHT_BINDING) uniform DirectionalLight lightInfo;
				layout(set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo camera;
				
				layout(set = MATERIAL_SET, binding = TEXTURE_BINDING0) uniform samplerCube reflectionMap;
				
				layout(set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
				{
					vec4 color;
					float reflectance;
				} parameters;
				
				
				layout(location = 0) in vec3 normal;
				layout(location = 1) in vec3 position;
				
				layout(location = 0) out vec4 color;
				
				
				float linearize(float depth, float n, float f)
				{
					float t = ((n - f) * depth + f) * (f - n);
					return n * f * 1 / t;
				}
				
				
				void main()
				{
					mat4 camera_transform = camera.transform;
					vec3 camera_position = vec3(camera_transform[3][0], camera_transform[3][1], camera_transform[3][2]);
				
					vec3 eye_vector = normalize(camera_position - position);
				
					vec3 reflection_vector = 2 * dot(eye_vector, normal) * normal - eye_vector;
				
					float depth = texture(reflectionMap, vec3(position.z, position.y, position.x)).r;
					depth = linearize(depth, 0.04, 20.0);
					vec4 reflection_color = mix(vec4(depth, depth, depth, 1), vec4(1, 1, 1, 1), 1 - parameters.reflectance);
				
					vec4 specular_color = mix(parameters.color, vec4(1, 1, 1, 1), 0.5 * dot(normalize(reflection_vector), normal) + 0.5);
				
					float dp = 0.5 * dot(-normal, lightInfo.direction) + 0.5;
					color = dp * specular_color * vec4(lightInfo.color, 1) * reflection_color;
				}
				
			}
		}
	}
}
