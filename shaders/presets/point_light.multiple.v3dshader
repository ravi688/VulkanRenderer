/*
	***This is computer generated notice - Do not modify it***

	VulkanRenderer (inclusive of its dependencies and subprojects 
	such as toolchains written by the same author) is a software to render 
	2D & 3D geometries by writing C/C++ code and shaders.

	File: point_light.v3dshader is a part of VulkanRenderer

	Copyright (C) 2021 - 2024  Author: Ravi Prakash Singh

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>. 
*/


#sl version 2023
#sb version 2023

Shader
{
	Properties
	{
		[Stage(fragment, vertex)]
		[Set(material_set, material_properties)]
		uniform Parameters
		{
			vec4 color;
		} parameters;

		[Stage(fragment)]
		[Set(material_set, texture0)]
		uniform sampler2D shadowMap;
	}

	Layout
	{
		[Rate(per_vertex)]
		[MeshLayout(sge_optimal)]
		[Attribute(position)]
		vec3 position;

		[Rate(per_vertex)]
		[MeshLayout(sge_optimal)]
		[Attribute(normal)]
		vec3 normal;
	}

	RenderPass
	{
		SubPass
		{
			[NoParse]
			GraphicsPipeline
			{
				colorBlend
				{
					attachment { }
				}

				depthStencil
				{
					depthWriteEnable = true,
					depthTestEnable = true
				}
			}

			[NoParse]
			GLSL
			{
				#stage vertex

				#version 450
				
				#include <v3d.h>
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = CAMERA_SET, binding = CAMERA_PROPERTIES_BINDING) uniform CameraInfo cameraInfo;
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = SCENE_SET, binding = LIGHT_BINDING) uniform PointLight light;
				/* 	Solution no 1 (using storage buffers and buffer references):
					-----------------------------------------------------------

					#extension GL_EXT_buffer_reference : enable

				 	layout(SGE_STORAGE_BUFFER_LAYOUT, buffer_reference) readonly buffer PointLightList
				 	{
				 		uint count;
				 		PointLight lights[];
				 	};
				 	layout(SGE_STORAGE_BUFFER_LAYOUT, buffer_reference) readonly buffer SpotLightList
				 	{
						uint count;
						SpotLight lights[];
				 	};
				 	layout(SGE_STORAGE_BUFFER_LAYOUT, buffer_reference) readonly buffer FarLightList
				 	{
				 		uint count;
						FarLight lights[];
				 	};

					layout(SGE_UNIFORM_BUFFER_LAYOUT, set = SCENE_SET, binding = LIGHT_BINDING) uniform Lights
					{
						PointLightList pointLights;
						SpotLightList spotLights;
						FarLightList farLights;
					};

					// shadow maps

					layout(SGE_UNIFORM_BUFFER_LAYOUT, set = SCENE_SET, binding = PLAIN_SHADOW_MAP_BINDING) uniform sampler2D plainShadowMaps[SGE_MAX_PLAIN_SHADOW_MAPS];
					layout(SGE_UNIFORM_BUFFER_LAYOUT, set = SCENE_SET, binding = CUBE_SHADOW_MAP_BINDING) uniform samplerCube cubeShadowMaps[SGE_MAX_CUBE_SHADOW_MAPS];

					Solution no 2 (using separate buffers only):
					-----------------------------------------------------------

					#define read_write_qual 
					#define buffer_type uniform
					#define buffer_layout SGE_UNIFORM_BUFFER_LAYOUT

					layout(buffer_layout, set = SCENE_SET, binding = POINT_LIGHT_BINDING) read_write_qual buffer_type PointLights
					{
						uint count;
						PointLight lights[];
					} pointLights;

					layout(buffer_layout, set = SCENE_SET, binding = SPOT_LIGHT_BINDING) read_write_qual buffer_type SpotLights
					{
						uint count;
						SpotLight lights[];
					} spotLights;

					layout(buffer_layout, set = SCENE_SET, binding = FAR_LIGHT_BINDING) read_write_equal buffer_type FarLights
					{
						uint count;
						FarLight lights[];
					} farLights;

					// shadow maps
					layout(SGE_UNIFORM_BUFFER_LAYOUT, set = SCENE_SET, binding = PLAIN_SHADOW_MAP_BINDING) uniform sampler2D plainShadowMaps[SGE_MAX_PLAIN_SHADOW_MAPS];
					layout(SGE_UNIFORM_BUFFER_LAYOUT, set = SCENE_SET, binding = CUBE_SHADOW_MAP_BINDING) uniform samplerCube cubeShadowMaps[SGE_MAX_CUBE_SHADOW_MAPS];
	
				 */
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = OBJECT_SET, binding = TRANSFORM_BINDING) uniform ObjectInfo objectInfo;
				
				layout(location = POSITION_LOCATION) in vec3 position;
				layout(location = NORMAL_LOCATION) in vec3 normal;
				
				layout(location = 0) out vec3 _normal;
				layout(location = 1) out vec3 _position;
				
				void main()
				{
					vec4 pos = objectInfo.transform * vec4(position, 1);
					_position = pos.xyz;
					vec4 clipPos = cameraInfo.projection * cameraInfo.view * objectInfo.transform * vec4(position, 1);
					clipPos.y = -clipPos.y;
					gl_Position = clipPos;
					_normal = normalize((objectInfo.normal * vec4(normal, 1)).xyz);
				}


				#stage fragment

				#version 450
				
				#include <v3d.h>
				
				layout(SGE_UNIFORM_BUFFER_LAYOUT, set = SCENE_SET, binding = LIGHT_BINDING) uniform PointLight light;
				layout(set = MATERIAL_SET, binding = MATERIAL_PROPERTIES_BINDING) uniform Parameters
				{
					vec4 color;
				} parameters;
				
				// TODO: set must be RENDER_SET
				layout(set = MATERIAL_SET, binding = TEXTURE_BINDING0) uniform samplerCube shadowMap;
				
				layout(location = 0) in vec3 normal;
				layout(location = 1) in vec3 position;
				
				layout(location = 0) out vec4 color;
				
				
				const float shadowBias = 0.0006f;
				const float minShadow = 0.2;
				
				float linearize(float depth, float n, float f)
				{
					float t = ((n - f) * depth + f) * (f - n);
					return n * f * 1 / t;
				}
				
				float max(float x1, float x2, float x3, float x4, float x5, float x6)
				{
					return max(max(max(max(max(x1, x2), x3), x4), x5), x6);
				}
				
				const float castedBias = 0.01f;
				
				void main()
				{
					vec3 dir = light.position - position;
				
					float closestDepth = texture(shadowMap, -vec3(dir.z, dir.y, dir.x)).r;
					closestDepth = linearize(closestDepth, 0.04, 20.0) * (20.0 - 0.04) + 0.04;
					float depth = max(dir.x, dir.y, dir.z, -dir.x, -dir.y, -dir.z);
					float receivedShadow = 1.0f;
					if(closestDepth < (depth + shadowBias))
						receivedShadow = minShadow;
				
					float sqrDistance = dot(dir, dir);
					float litAmount = light.intensity / sqrDistance;
					float dp = dot(normal, normalize(dir));
					float castedShadow = max(0.0, dp) + castedBias;
					vec4 _color = receivedShadow * litAmount * castedShadow * vec4(light.color, 1) * parameters.color;
					color = vec4(_color.r, _color.g, _color.b, 1);
				}

			}
		}
	}
}