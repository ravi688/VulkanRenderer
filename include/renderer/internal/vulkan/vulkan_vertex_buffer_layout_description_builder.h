#pragma once

#include <renderer/defines.h>
#include <renderer/internal/vulkan/vulkan_vertex_buffer_layout_description.h>
#include <bufferlib/buffer.h>  // buffer_t

typedef struct vulkan_vertex_buffer_layout_description_t vulkan_vertex_buffer_layout_description_t;

typedef struct vulkan_vertex_buffer_layout_description_builder_t
{
	memory_allocator_t* allocator;
	/* array of vulkan_vertex_buffer_layout_description_t objects */
	buffer_t description_array;
	u32 bind_index;
} vulkan_vertex_buffer_layout_description_builder_t;

BEGIN_CPP_COMPATIBLE

/* constructors and destructors */
RENDERER_API vulkan_vertex_buffer_layout_description_builder_t* vulkan_vertex_buffer_layout_description_builder_create(memory_allocator_t* allocator);
RENDERER_API vulkan_vertex_buffer_layout_description_builder_t* vulkan_vertex_buffer_layout_description_builder_create_inverse(memory_allocator_t* allocator, vulkan_vertex_buffer_layout_description_t* descriptions, u32 description_count);
RENDERER_API void vulkan_vertex_buffer_layout_description_builder_destroy(vulkan_vertex_buffer_layout_description_builder_t* builder);

RENDERER_API void vulkan_vertex_buffer_layout_description_builder_add(vulkan_vertex_buffer_layout_description_builder_t* builder, u32 count);
RENDERER_API void vulkan_vertex_buffer_layout_description_builder_bind(vulkan_vertex_buffer_layout_description_builder_t* builder, u32 index);

RENDERER_API vulkan_vertex_buffer_layout_description_t* vulkan_vertex_buffer_layout_description_builder_get(vulkan_vertex_buffer_layout_description_builder_t* builder);
RENDERER_API u32 vulkan_vertex_buffer_layout_description_builder_get_count(vulkan_vertex_buffer_layout_description_builder_t* builder);

RENDERER_API void vulkan_vertex_buffer_layout_description_builder_begin(vulkan_vertex_buffer_layout_description_builder_t* builder, u32 stride, VkVertexInputRate input_rate, u32 binding_number);
RENDERER_API void vulkan_vertex_buffer_layout_description_builder_add_attribute(vulkan_vertex_buffer_layout_description_builder_t* builder, u32 location, VkFormat format, u32 offset);
RENDERER_API void vulkan_vertex_buffer_layout_description_builder_end(vulkan_vertex_buffer_layout_description_builder_t* builder);

END_CPP_COMPATIBLE
